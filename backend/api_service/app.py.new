"""
FastAPI application for the API service.
"""

from contextlib import asynccontextmanager
import uuid
from fastapi import FastAPI, Depends, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
import logging

from backend.database.session import get_db, init_db, close_db
from backend.config.settings import get_settings
from backend.config.logging import setup_logging, set_request_id
from backend.core.exceptions import StockScannerError
from backend.api_service.routes import router

class RequestIDMiddleware(BaseHTTPMiddleware):
    """Middleware to set a unique request ID for each request."""

    async def dispatch(self, request: Request, call_next):
        # Get request ID from header or generate a new one
        request_id = request.headers.get("X-Request-ID", str(uuid.uuid4()))

        # Set the request ID in the context variable
        set_request_id(request_id)

        # Add the request ID to the response headers
        response = await call_next(request)
        response.headers["X-Request-ID"] = request_id

        return response

settings = get_settings()
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan context manager for the FastAPI application.

    This replaces the deprecated on_event handlers with a context manager
    that handles startup and shutdown events.
    """
    # Startup: Initialize application
    setup_logging(service_name="api_service")
    logger.info("Initializing application...")

    # Initialize database
    logger.info("Initializing database...")
    await init_db()

    logger.info("Application startup complete")

    yield  # Application runs here

    # Shutdown: Clean up resources
    logger.info("Shutting down application...")

    # Close database connections
    logger.info("Closing database connections...")
    await close_db()

    logger.info("Application shutdown complete")

# Create the app instance
app = FastAPI(
    title="Stock Scanner API",
    description="API for the Stock Scanner application",
    version="0.1.0",
    lifespan=lifespan,
)

# Add request ID middleware
app.add_middleware(RequestIDMiddleware)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """Root endpoint to check if the API is running."""
    return {"message": "Stock Scanner API is running"}

@app.get("/health")
async def health_check(db: AsyncSession = Depends(get_db)):
    """Health check endpoint to verify that the API and database are working."""
    try:
        # Simple database query to verify connection
        await db.execute(text("SELECT 1"))
        db_status = "connected"
    except Exception as e:
        db_status = f"error: {str(e)}"

    return {
        "status": "ok",
        "api_version": "0.1.0",
        "database": db_status
    }

# Exception handlers
@app.exception_handler(StockScannerError)
async def stockscanner_exception_handler(request: Request, exc: StockScannerError):
    """Handle StockScanner-specific exceptions."""
    logger.error(f"StockScanner error: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=400,
        content={"error": str(exc), "type": exc.__class__.__name__}
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Handle unexpected exceptions."""
    logger.error(f"Unexpected error: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"error": "Internal server error"}
    )

# Include API routes
app.include_router(router, prefix="/api/v1")

# If this file is run directly (not imported), run the application
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
