name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  linting-frontend:
    name: Frontend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

  linting-backend:
    name: Backend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort

      - name: Run black
        run: |
          black --check ./backend

      - name: Run isort
        run: |
          isort --check-only --profile black ./backend

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [linting-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run backend tests
        run: |
          # Create a .env file with test values
          echo "POSTGRES_USER=postgres" > .env.test
          echo "POSTGRES_PASSWORD=postgres" >> .env.test
          echo "POSTGRES_DB=backend_test" >> .env.test
          echo "TELEGRAM_BOT_TOKEN=dummy_token" >> .env.test
          echo "TELEGRAM_CHAT_ID=-1002575188289" >> .env.test
          echo "DEBUG=True" >> .env
          echo "NOTIFICATION_SERVICE_URL=http://notification_service:8001" >> .env.test
          echo "SCRAPER_SERVICE_URL=http://scraper_service:8002" >> .env.test

          # Build test_runner image with cache
          docker buildx build \
            --cache-from=type=gha,scope=backend-test \
            --cache-to=type=gha,mode=max,scope=backend-test \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --load \
            -t test_runner:latest \
            -f ./backend/Dockerfile.dev ./backend

          # Run tests using docker-compose with pre-built image
          docker compose -f docker-compose.test.yml up --exit-code-from test_runner

  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: false
          load: true
          tags: stock-scanner-backend:latest
          cache-from: type=gha,scope=backend-prod
          cache-to: type=gha,mode=max,scope=backend-prod
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    needs: [linting-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: false
          load: true
          tags: stock-scanner-frontend:latest
          cache-from: type=gha,scope=frontend-prod
          cache-to: type=gha,mode=max,scope=frontend-prod
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Uncomment this job when you're ready to deploy
  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: [build-backend, build-frontend]
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     # Add deployment steps here
  #     # For example, deploy to a cloud provider or container registry
