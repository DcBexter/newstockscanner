name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run backend tests
        run: |
          # Create a .env file with test values
          echo "POSTGRES_USER=postgres" > .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_DB=backend_test" >> .env
          echo "TELEGRAM_BOT_TOKEN=dummy_token" >> .env
          echo "TELEGRAM_CHAT_ID=-1002575188289" >> .env
          echo "DEBUG=True" >> .env
          echo "NOTIFICATION_SERVICE_URL=http://notification_service:8001" >> .env
          echo "SCRAPER_SERVICE_URL=http://scraper_service:8002" >> .env
          
          # Run tests using docker-compose
          docker compose -f docker-compose.test.yml up --build --exit-code-from test_runner

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: false
          tags: stock-scanner-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: false
          tags: stock-scanner-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Uncomment this job when you're ready to deploy
  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   needs: build-images
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     # Add deployment steps here
  #     # For example, deploy to a cloud provider or container registry